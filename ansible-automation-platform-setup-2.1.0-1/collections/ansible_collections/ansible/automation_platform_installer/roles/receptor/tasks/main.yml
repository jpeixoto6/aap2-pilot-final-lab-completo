---
- name: Assert Receptor Network Mesh data
  include_tasks: preflight.yml
  when: mesh is not defined

- name: Install receptor
  dnf:
    name: "{{ receptor_dependencies_list }}"
    state: latest

- name: Install receptor dependencies
  dnf:
    name: "{{ receptor_workable_dependencies }}"
    state: latest
  when:
    - receptor_workable_dependencies is defined
    - node_type in receptor_workable_types

- name: Invoke Receptor TLS
  when: receptor_tls|bool
  block:

    - name: Reconfigure Receptor CA (forced)
      file:
        dest: "{{ receptor_tls_dir }}"
        state: absent
      when: (receptor_tls_reconfigure|bool) or
            (mesh_ca_certfile | default('') | length) or
            (mesh_ca_keyfile | default('') | length)

    - name: Create Receptor CA directory
      file:
        dest: "{{ receptor_tls_ca_dir }}"
        state: directory
        mode: '0750'
        owner: receptor
        group: receptor
        recurse: yes

    - name: Configure Receptor Certificate Authority
      include_tasks: tls_ca.yml
      run_once: true
      when:
        - groups['automationcontroller'] | default([]) | length
        - inventory_hostname == groups['automationcontroller'][0]

    - name: Generate Receptor Mesh Nodes certificates
      include_tasks: tls_nodes.yml

    - name: Sign Receptor Mesh Node Certificates
      include_tasks: tls_ca_sign.yml

- name: Adds awx user to receptor group
  user:
    name: awx
    groups: receptor
    append: yes
    home: /var/lib/awx
    shell: /bin/bash

- name: Ensure soft/hard file descriptors limits
  template:
    src: templates/pam_limits_awx.conf.j2
    dest: /etc/security/limits.d/awx.conf
    mode: '0600'
    owner: root
    group: root

- name: Create and and distribute keys for signing work
  import_tasks: work_sign_keys.yml

- name: Allow awx user to read receptor configuration
  file:
    dest: /etc/receptor
    state: directory
    owner: receptor
    group: awx
    mode: "0750"

- name: Ensure systemd override directory exists
  file:
    dest: /etc/systemd/system/receptor.service.d
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Override receptor's systemd service runuser
  template:
    src: templates/systemd_receptor_override.conf.j2
    dest: /etc/systemd/system/receptor.service.d/override.conf
    mode: '0644'
    owner: root
    group: root

- name: Configure the awx-receptor socket directory.
  file:
    path: "{{ receptor_socket_dir }}"
    state: directory
    owner: "{{ run_receptor_as }}"
    group: "{{ run_receptor_as }}"
    mode: '0750'

- name: Create tmpfiles.d entry for awx-receptor socket directory
  template:
    src: templates/awx-receptor_tmpd.conf
    dest: /etc/tmpfiles.d/awx-receptor.conf
    force: yes
    mode: '0640'
    owner: root
    group: root

- name: Create tmpfiles.d entry for receptor socket directory
  template:
    src: templates/receptor_tmpd.conf
    dest: /etc/tmpfiles.d/receptor.conf
    force: yes
    mode: '0640'
    owner: root
    group: root

- name: Configure firewall
  include_role:
    name: ansible.automation_platform_installer.firewall
  vars:
    firewalld_http_port: "{{ nginx_http_port | default(80) }}"
    firewalld_https_port: "{{ nginx_https_port | default(443) }}"

- name: Configure podman
  include_role:
    name: ansible.automation_platform_installer.podman
  vars:
    run_podman_as: "{{ run_receptor_as }}"
  when: node_type in receptor_workable_types

- name: Deploy receptor config
  template:
    src: templates/receptor.conf.j2
    dest: /etc/receptor/receptor.conf
    mode: '0644'
    owner: receptor
    group: receptor
  notify:
    - "Receptor Reload Type"

- name: Start Receptor service
  systemd:
    name: receptor
    state: started
    daemon_reload: yes
    enabled: yes

- name: Get UUID for execution nodes
  shell: ansible-runner worker --worker-info
  become: true
  become_user: "{{ run_receptor_as }}"
  register: worker_info
  changed_when: false
  when: node_type == 'execution'

- name: Set UUID option for execution_nodes
  set_fact:
    uuid_option: "--uuid \"{{ (worker_info['stdout'] | from_yaml)['uuid'] | trim }}\""
  when: node_type == 'execution'

- name: Set UUID option for control / hybrid nodes
  set_fact:
    uuid_option: "--uuid \"{{ system_uuid | trim }}\""
  when: node_type in ['control', 'hybrid'] and system_uuid is defined

- name: Register the node instance in the database.
  shell: awx-manage provision_instance --hostname="{{ receptor_host_identifier }}" --node_type="{{ node_type }}" {{uuid_option | default(None) }}
  args:
    executable: /bin/bash
  become_user: awx
  become: True
  register: provision_execution_node
  changed_when: "'changed: True' in provision_execution_node.stdout"
  delegate_to: "{{ groups['automationcontroller'][0] }}"
  when: node_type in receptor_workable_types

- name: Register controlplane nodes to controlplane queue
  shell: >
    awx-manage register_queue --queuename="controlplane" --instance_percent=100
  args:
    executable: /bin/bash
  become_user: awx
  become: true
  register: _register_queue
  changed_when: "'changed: True' in _register_queue.stdout"
  delegate_to: "{{ groups['automationcontroller'][0] }}"
  run_once: true

- name: Register work nodes to default queue
  shell: >
    awx-manage register_queue --queuename="default" --instance_percent=100
  args:
    executable: /bin/bash
  become_user: awx
  become: True
  register: _register_queue
  changed_when: "'changed: True' in _register_queue.stdout"
  delegate_to: "{{ groups['automationcontroller'][0] }}"
  run_once: true

- name: Register instance_group_* groups
  run_once: true
  shell: >
    awx-manage register_queue --queuename="{{ item }}"
    --hostnames="{{ ','.join(mesh_groups[item] | map('extract', hostvars, 'receptor_host_identifier') | list | select('defined'))  }}"
  args:
    executable: /bin/bash
  become_user: awx
  become: True
  register: _register_queue
  changed_when: "'changed: True' in _register_queue.stdout"
  delegate_to: "{{ groups['automationcontroller'][0] }}"
  when: item.startswith('instance_group_') and (mesh_groups[item] | length)
  with_items: "{{ mesh_groups }}"

- name: Flush handlers
  meta: flush_handlers

- name: Validate connectivity for Mesh peers
  command: >
    receptorctl --socket {{ receptor_socket_dir }}/{{ control_filename }} ping {{ hostvars[item]['receptor_host_identifier'] }} --count 1
  become: yes
  become_user: "{{ run_receptor_as }}"
  register: mesh_ping
  failed_when: "'Error: no route to node' in mesh_ping.stdout or mesh_ping.rc != 0"
  until: mesh_ping.stdout.startswith('Reply')
  delay: 3
  retries: 10
  ignore_errors: true
  with_items: "{{ mesh[inventory_hostname]['peers'] }}"

- name: Compose Mesh Report
  set_fact:
    mesh_report: "{{ mesh_ping | ansible.automation_platform_installer.mesh_report }}"

- name: Receptor Mesh Report
  debug:
    var: mesh_report
  when: mesh_report is defined

- name: Report error when mesh connectivity issue is detected
  fail:
    msg: "An error was detected on Controller Mesh network.
          Please verify the task output above for further details."
  when: mesh_ping.failed | default(False) | bool
