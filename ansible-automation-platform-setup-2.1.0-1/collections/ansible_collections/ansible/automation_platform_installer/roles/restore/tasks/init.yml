---
- name: Create a directory for the database restore to live.
  file:
    path: '{{ backup_dir.rstrip("/") }}/restore/'
    mode: 0775
    owner: root
    state: directory
  notify: Remove the restore directory.

- name: Upload the backup tarball to the server.
  copy:
    dest: '{{ backup_dir.rstrip("/") }}/restore/{{ restore_file_prefix }}.tar.gz'
    mode: 0664
    owner: root
    src: '{{ restore_backup_file }}'

- name: Uncompress the backup file.
  unarchive:
    src: '{{ backup_dir.rstrip("/") }}/restore/{{ restore_file_prefix }}.tar.gz'
    dest: '{{ backup_dir.rstrip("/") }}/restore/'
    remote_src: true

- name: Check for a host specific directory
  stat:
    path: '{{ backup_dir.rstrip("/") }}/restore/{{ inventory_hostname }}.tar.gz'
  register: host_archive

- name: Register presence of host archive
  set_fact:
    has_host_archive: '{{ host_archive.stat.exists }}'

- name: Cleanup any stale backup restore version
  file:
    path: '{{ backup_dir.rstrip("/") }}/restore/version'
    state: absent
  ignore_errors: true

- name: Extract the common archive.
  unarchive:
    src: '{{ backup_dir.rstrip("/") }}/restore/common.tar.gz'
    dest: '{{ backup_dir.rstrip("/") }}/restore/'
    remote_src: true
  when:
    - groups['automationcontroller'] | default([]) | length

- name: Check controller installed version
  slurp:
    src: "/var/lib/awx/.tower_version"
  register: controller_installed_version
  ignore_errors: true
  no_log: true
  when:
    - groups['automationcontroller'] | default([]) | length
    - inventory_hostname in groups['automationcontroller']

- name: Check controller version from backup
  slurp:
    src: '{{ backup_dir.rstrip("/") }}/restore/version'
  ignore_errors: true
  no_log: true
  register: controller_backup_version
  when:
    - groups['automationcontroller'] | default([]) | length
    - inventory_hostname in groups['automationcontroller']

- name: Assert backup is compatible with current controller installed version
  assert:
    that:
      - (controller_installed_version['content'] | b64decode | trim)  == (controller_backup_version['content'] | b64decode | trim)
    fail_msg: "Cannot restore a backup from version {{ controller_backup_version['content'] | b64decode | trim }} into the current installed version {{ controller_installed_version['content'] | b64decode | trim }}."
    success_msg: "Backup version matches with the installed version."
  when:
    - groups['automationcontroller'] | default([]) | length
    - inventory_hostname in groups['automationcontroller']
    - not controller_installed_version.failed | bool
    - not controller_backup_version.failed | bool

- name: Extract the automationhub archive.
  unarchive:
    src: '{{ backup_dir.rstrip("/") }}/restore/automationhub.tar.gz'
    dest: '{{ backup_dir.rstrip("/") }}/restore/'
    remote_src: true
  when:
    - inventory_hostname in groups['automationhub'] | default([])

- name: Extract the sso archive.
  unarchive:
    src: '{{ backup_dir.rstrip("/") }}/restore/sso.tar.gz'
    dest: '{{ backup_dir.rstrip("/") }}/restore/'
    remote_src: true
  when:
    - inventory_hostname in groups['sso'] | default([])

- name: Extract the host specific archive
  unarchive:
    src: '{{ backup_dir.rstrip("/") }}/restore/{{ inventory_hostname }}.tar.gz'
    dest: '{{ backup_dir.rstrip("/") }}/restore/'
    remote_src: true
  when: has_host_archive | bool

- name: Changing the permission of the restore directory after extraction of backup archive
  file:
    path: '{{ backup_dir.rstrip("/") }}/restore'
    state: directory
    mode: 0755
    owner: root

- block:
    - name: controller | Stop Web Service.
      service:
        name: nginx
        state: stopped
      notify: start web service.

    - name: controller | Stop supervisor.
      service:
        name: supervisord
        state: stopped
      notify: start supervisord.

    - name: controller | Get tower db settings
      shell: "awx-manage print_settings | grep '^DATABASES'"
      register: results
      changed_when: False
      no_log: True

    - name: controller | Ingest database settings
      set_fact:
        controller_db_settings: "{{ results.stdout | regex_replace('DATABASES\\s+= ', '') }}"
      no_log: True

  when:
    - inventory_hostname in groups['automationcontroller'] | default([])

- block:
    - name: hub | Get hub database settings
      shell: "grep '^DATABASES' /etc/pulp/settings.py"
      register: ah_database_settings
      changed_when: false
      no_log: true

    - name: hub | Ingest hub database settings
      set_fact:
        automationhub_db_settings: "{{ ah_database_settings.stdout | regex_replace('DATABASES\\s+= ', '') }}"
      no_log: true
  when:
    - inventory_hostname in groups['automationhub'] | default([])

- block:
    - include_vars: ../roles/sso/defaults/main.yml

    - name: Stop SSO Service
      service:
        name: '{{ sso_app_name }}'
        enabled: yes
        state: stopped
  when:
    - inventory_hostname in groups['sso'] | default([])
